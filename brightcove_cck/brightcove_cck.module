<?php

/**
  * @file
  * Brightcove CCK module provides a Content Construction Kit module to
  * developers, allowing them to browse videos in their Brightcove Studio and
  * upload them.
  *
  * @author
  * Jakub Suchy <jakub@dynamiteheads.com>, Andrew Burcin <andrew@dynamiteheads.com>
  * 
  * Module development sponsored by Brightcove, Inc.
  */

/**
  * Implementation of hook_menu().
  */
function brightcove_cck_menu() {
  $items = array();
  $items['brightcove_cck/autocomplete'] = array(
      'title' => 'Brightcove CCK autocomplete',
      'page callback' => 'brightcove_cck_autocomplete',
      'access arguments' => array('access content'), // TODO: Security - determine access.
      'type' => MENU_CALLBACK,
      );
  $items['brightcove_cck/browse'] = array(
      'title' => 'Brightcove Videos Browser',
      'page callback' => 'brightcove_cck_browse',
      'file' => 'brightcove_cck.browse.inc',
      'access arguments' => array('access content'), // TODO: Security - determine access.
      'type' => MENU_CALLBACK,
      );
  $items['brightcove_cck_player/%node/%/%'] = array(
      'title' => 'Brightcove Videos Window Player',
      'page callback' => 'brightcove_cck_player',
      'page arguments' => array(1, 2, 3),
      'access arguments' => array('access content'), // TODO: Security - determine access.
      'type' => MENU_CALLBACK,
      );

  return $items;
}

function brightcove_cck_player($node, $field_name, $delta) {
  if (node_access('view', $node) && content_access('view', $field_name)) {

    $field = $node->{$field_name}[$delta]['video_id'];
    $output = '<script src="http://admin.brightcove.com/js/BrightcoveExperiences.js" type="text/javascript"></script>';
    $bc = _brightcove_initialize();
    $output .= $bc->embed('video', variable_get('brightcove_player', ''), $field, array());

    print $output;
  }
}

/**
  * Menu callback for brightcove_cck/autocomplete.
  *
  * @param $field_name
  *  Field name - CCK field name that is requesting autocomplete. Unused, will be utilized to limit access to certain videos for certain fields.
  * @param $string
  *  String to search for - will match videos by this text.
  * @return
  *  JSON object with matched videos.
  */
function brightcove_cck_autocomplete($field_name, $string = '') {
  $bc = _brightcove_initialize();
  $matches = array();

  try {
    $result = $bc->find('find_videos_by_text', array('text' => $string));
  } catch (Exception $error) {
    watchdog('brightcove', 'Finding videos in autocomplete failed.', array(), WATCHDOG_ERROR);
  }
  foreach($result as $video) {
    // Note: Video ID is autogenerated by Brightcove and thus doesn't require XSS protection.
    $matches[check_plain($video->name) . ' [id:' . $video->id . ']'] = check_plain($video->name) . ' [id: ' . $video->id . ']';
  }
  return drupal_json($matches);
}


/**
 * Implementation of hook_field_info().
 */
function brightcove_cck_field_info() {
  return array(
    'brightcove_video' => array(
      'label' => t('Brightcove Video'),
      'description' => t('Browse and upload videos at Brightcove.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function brightcove_cck_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();

      // Only allow Upload if this site has Write API keys.
      if (brightcove_write_api_access()) {
        $form['allow_upload'] = array(
          '#type' => 'checkbox',
          '#title' => t('Allow upload'),
          '#description' => t('Whether to allow uploading new videos to Brightcove Studio from this field. Requires Write API keys with at least a <a href="http://www.brightcove.com/en/video-platform/editions-and-pricing">Professional account</a>.'),
          '#default_value' => $field['allow_upload'],
        );
      }
      return $form;

    case 'save':
      $settings = array('allow_upload');
      return $settings;

    case 'database columns':
      // We only save video_id as it's the only stable value in the video -
      // anything else might change and we won't be able to easily detect it.
      $columns = array(
        'video_id' => array('type' => 'varchar', 'length' => 15, 'not null' => FALSE, 'index' => TRUE),
      );
      return $columns;

    case 'views data':
      return ;
  }
}

/**
 * Implementation of hook_field().
 */
function brightcove_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
        foreach ($items as $delta => $item) {
          if (is_array($item)) {
            $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
            if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
            if (!empty($item['video_id'])) {
              $bc = _brightcove_initialize();
              try {
                $video = $bc->find('find_video_by_id', $item['video_id']);
              } catch (Exception $error) {
                form_error($element[$field_key], t('There was a problem accessing Brightcove. Please try again later.'));
                watchdog('brightcove', 'Validating element with Brightcove failed', array(), WATCHDOG_ERROR);
              }
              if (empty($video->id)) {
                form_set_error($error_element, t('%name: invalid video.', array('%name' => t($field['widget']['label']))));
              }
            }
          }
        }
      return $items;
  }
}

/**
  * Implementation fo hook_content_is_empty().
  */
function brightcove_cck_content_is_empty($item, $field) {
  return FALSE;
}

/**
  * Validate callback for the field.
  */
function brightcove_cck_browser_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $type_name = $element['#type_name'];
  $field = content_fields($field_name, $type_name);
  $field_key = $element['#columns'][0];
  $value = $element['#value'][$field_key];
  if (!empty($value)) {
    // Assign ID to the value.
    // 231289 [id:72431493001]
    preg_match('/\[id:([^\[]*)\]$/', $value, $matches);
    $id = $matches[1];

    if (is_numeric($id)) {
      // Matched ID, check if the video exists.
      $bc = _brightcove_initialize();
      try {
        $video = $bc->find('find_video_by_id', $id);
      } catch (Exception $error) {
        form_error($element[$field_key], t('There was a problem accessing Brightcove. Please try again.'));
        watchdog('brightcove', 'Validating element with Brightcove failed', array(), WATCHDOG_ERROR);
      }
      if ($video->id != $id) {
        form_error($element[$field_key], t('%name: Found no valid video with that name. Please note that it might take several minutes after the video has been uploaded in Brightcove Studio to appear in the API.', array('%name' => t($field['widget']['label']))));
      }
    } else {
      // Didn't match ID, try looking up the video text at BC.
      $bc = _brightcove_initialize();
      try {
        $result = $bc->find('find_videos_by_text', array('text' => $value));
      } catch (Exception $error) {
        form_error($element[$field_key], t('There was a problem accessing Brightcove. Please try again'));
        watchdog('brightcove', 'Validating element with Brightcove failed', array(), WATCHDOG_ERROR);
      }
      if (count($result) > 1) {
        // This title is ambiguous.
        form_error($element[$field_key], t('%name: Video title %title matched more than one video. In case of doubt, use text "title [id:ID_OF_THE_VIDEO]"', array('%title', $value, '%name' => t($field['widget']['label']))));
      } else if (count($result) == 0) {
        // No video found.
        form_error($element[$field_key], t('%name: Found no valid video with that name. Please note that it might take several minutes after the video has been uploaded in Brightcove Studio to appear in the API.', array('%name' => t($field['widget']['label']))));
      } else {
        $id = $result[0]->id;
      }
    }
  }
  form_set_value($element, $id, $form_state);
}

/**
  * Implementation of hook_formatter_info().
  *
  * TODO: Allow different formats - thumbnail with a video in new window (Security: check access to the parent node?)
  * TODO: Different formats - thumbnail with a video to Lightbox - check access
  */
function brightcove_cck_field_formatter_info() {
  $formatters = array(
      'default' => array(
        'label' => t('Standard video player'),
        'field types' => array('brightcove_video'),
        'multiple values' => CONTENT_HANDLE_CORE,
        ),
      );
  if (module_exists('lightbox2')) {
    $formatters['lightbox2_player'] = array(
        'label' => t('Default thumbnail -> Lightbox2'),
        'field types' => array('brightcove_video'),
        'multiple values' => CONTENT_HANDLE_CORE,
        );
    if (module_exists('imagecache')) {
      $presets = imagecache_presets();
      foreach($presets as $preset_id => $preset) {
        $formatters['brightcove_cck_lightbox2_imagecache_' . $preset['presetname']] = array(
            'label' => t('Imagecache @preset -> Lightbox2', array('@preset' => $preset['presetname'])),
            'field types' => array('brightcove_video'),
            'multiple values' => CONTENT_HANDLE_CORE,
            );
      }
    }
  }
  return $formatters;
}


/**
 * Implementation of hook_widget_info().
 */
function brightcove_cck_widget_info() {
  return array(
    'brightcove_cck_browser' => array(
      'label' => t('Video browser & upload'),
      'field types' => array('brightcove_video'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
  * Implementation of hook_elements().
 */
function brightcove_cck_elements() {
  return array(
      'brightcove_cck_browser' => array(
        '#input' => TRUE,
        '#columns' => array('video_id'), '#delta' => 0,
        '#process' => array('brightcove_cck_browser_process'),
        '#autocomplete_path' => FALSE,
        ),
      );
}

/**
 * Brightcove CCK field form that returns the actual field to the user.
 * Parts of this and subsequent JS taken from Nodereference Explorer. Thanks!
 */
function brightcove_cck_browser_process($element, $edit, $form_state, $form) {
  $field_key  = $element['#columns'][0];

  modalframe_parent_js(); //dialog internal area
  $element[$field_key] = array(
    '#type' => 'text_textfield',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#autocomplete_path' => 'brightcove_cck/autocomplete/'. $element['#field_name'],
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  // Button to browse videos.
  $element['actions']['browse'] = array(
    '#type' => 'brightcove_cck_browse_button',
    '#id' => $element['#id'] . '-browse',
    '#attributes' => array('class' => 'brightcove-cck-browse-button', 'rel' => $element['#id'] . '-video-id-video-id'),
    '#value' => t('Browse'),
  );
    $element['actions']['remove'] = array(
      '#type' => 'brightcove_cck_browse_button',
      '#id' => $element['#id'] . '-remove',
      '#attributes' => array('class' => 'brightcove-cck-remove-button', 'rel' => $element['#id'] . '-video-id-video-id'),
      '#value' => t('Remove'),
    );
  if (!isset($element['#default_value'][$field_key])) {
    $element['actions']['remove']['#attributes']['disabled'] = 'disabled';
  }

  // TODO: Button for upload, if upload is enabled and allowed.

  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'brightcove_cck_browser_validate');

  // Used so that hook_field('validate') knows where to flag an error.
  // @see userreference.module
  $element['_error_element'] = array(
      '#type' => 'value',
      '#value' => implode('][', array_merge($element['#parents'], array($field_key, $field_key))),
      );
  return $element;

}

/**
 * Implementation of hook_widget().
 */
function brightcove_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'brightcove_cck_browser':
      $element = array(
          '#type' => 'brightcove_cck_browser',
          '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
          '#value_callback' => 'brightcove_cck_browser_value',
          );
      break;
  }
  return $element;
}

/**
 * Callback for Brightcove CCK browser widget.
 * Will return a field value in "video-name [id:videoId]" format.
 *
 */
function brightcove_cck_browser_value($element, $edit = FALSE) {
  $field_key  = $element['#columns'][0];
  $id = $element['#default_value'][$field_key];
  if ((int) $id > 1) {
    try {
      $bc = _brightcove_initialize();
      $video = $bc->find('find_video_by_id', $id);
    } catch (Exception $error) {
      form_error($element, t('There was a problem accessing Brightcove. Please try again later.') . $id);
      watchdog('brightcove', 'Validating element with Brightcove failed.', array(), WATCHDOG_ERROR);
    }
    if ($video->id) {
      return array($field_key => check_plain($video->name) . ' [id:' . $video->id . ']');
    }
  }
  return array($field_key => NULL);
}

/**
 * Theme function returning a video field.
 */
function theme_brightcove_cck_browser($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_theme().
 */
function brightcove_cck_theme() {
  $theme = array(
      'brightcove_cck_browser' => array(
        'arguments' => array('element' => NULL),
        ),
      'brightcove_cck_formatter_default' => array(
        'arguments' => array('element'),
        'file' => 'theme.inc',
        ),
      'brightcove_cck_browse_button' => array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_brightcove_cck_browse_button',
        'file' => 'theme.inc',
        ),
      'brightcove_cck_browse_item' => array(
        'arguments' => array('item' => NULL),
        'file' => 'theme.inc',
        ),
      'brightcove_cck_browse_items' => array(
        'arguments' => array('item' => NULL),
        'file' => 'theme.inc',
        ),
      );
  if (module_exists('lightbox2')) {
    $theme['brightcove_cck_formatter_lightbox2_player'] = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_brightcove_cck_lightbox2_player',
      'file' => 'theme.inc',
    );
    if (module_exists('imagecache')) {
      $presets = imagecache_presets();
      foreach($presets as $preset_id => $preset) {
        $theme['brightcove_cck_formatter_lightbox2_imagecache_' . $preset['presetname']] = array(
          'arguments' => array('element'),
          'function' => 'theme_brightcove_cck_lightbox2_imagecache',
          'file' => 'brightcove_cck.formatters.inc',
        );
      }
    }
  }
  dpm($theme);
  return $theme;
}

/**
  * Browse form. Will return a form for one video item.
  * 
  * @see brightcove_cck_forms().
  */
function brightcove_cck_browser_form(&$form_state, $item) {
  $form['id'] = array(
      '#type' => 'value',
      '#value' => $item['video_id'],
      );
  $form['title'] = array(
      '#type' => 'value',
      '#value' => $item['title'],
      );
  $form['text_title'] = array(
      '#type' => 'item',
      '#value' => $item['title'],
      );
  $form['text_image'] = array(
      '#type' => 'item',
      '#value' => theme('image', $item['thumbnail'], '', '', NULL, FALSE),
      );
  $form['submit'] = array(
      '#type' => 'submit',
      '#name' => 'submit-' . $item['video_id'],
      '#value' => t('Attach'),
      );
  $form['#submit'] = array("brightcove_cck_browser_form_submit");
  return $form;
}

/**
  * Submit callback for brightcove_cck_browser_form().
  *
  * Just take the value and pass it to modalframe.
  */
function brightcove_cck_browser_form_submit($form, &$form_state) {
  // The value is "title [id:ID]" - recognised by validating element.
  $return['selected'] = $form_state['values']['title'] . ' [id:' . $form_state['values']['id'] . ']';
  modalframe_close_dialog($return);
}
/**
  * Implementation of hook_forms().
  *
  * Needed to help Drupal determine which form to render - every video item in
  * the browser is a separate form.
  */
function brightcove_cck_forms() {
  $args = func_get_args();
  $form_id = $args[0];
  if (strpos($form_id, "brightcove_cck_browser_form") === 0) {
    $forms[$form_id] = array('callback' => 'brightcove_cck_browser_form');
  }
  return $forms;
}

